{"version":3,"sources":["webpack://project-structure/./src/components/beatBlade/index.js","webpack://project-structure/./src/pages/game/index.js"],"names":["BeatBlade","constructor","size","event","this","startGame","stopGame","success","failure","subElements","target","classList","contains","score","textContent","alert","clearInterval","start","fail","render","wrapper","document","createElement","innerHTML","getTemplate","element","firstElementChild","getSubElements","initEventListeners","cells","addEventListener","onStart","onStop","onPick","update","body","getBody","goblin","remove","setInterval","random","getRandomIntInclusive","append","add","max","min","Math","ceil","floor","elements","querySelectorAll","item","dataset","getCell","i","push","index","join","destroy","Page","components","beadBlade","value","console","log","initComponents","renderComponents","Object","keys","forEach","component","root","radio","onChangeSize","removeEventListeners","values"],"mappings":"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","file":"game-index-js-684.js","sourcesContent":["\n\nexport default class BeatBlade {\n    subElements = {};\n    start;\n    score = 0;\n\n\n    onStart = (event) => {\n        this.startGame();\n    }\n\n    onStop = (event) => {\n        this.stopGame();\n    }\n\n    onPick = (event) => {\n\n        const { success, failure } = this.subElements;\n\n        const element = event.target;\n\n        if (element.classList.contains('beadBlade__goblin')) {\n            this.score += 1;\n            success.textContent = this.score;\n            if (this.score === 5) return alert('you are win');\n\n            clearInterval(this.start);\n            this.startGame();\n        } else {\n            this.fail -= 1;\n            failure.textContent = this.fail;\n\n            if (this.fail === 0) {\n                this.stopGame()\n                return alert('you are lose');\n            }\n        }\n    }\n\n\n    constructor(size = 4) {\n        this.size = size >= 4 ? size : 4;\n        this.score = 0;\n        this.fail = 5;\n        this.render();\n    }\n\n    render() {\n        const wrapper = document.createElement('div');\n\n        wrapper.innerHTML = this.getTemplate();\n        this.element = wrapper.firstElementChild;\n\n        this.subElements = this.getSubElements();\n        this.initEventListeners();\n    }\n\n    initEventListeners() {\n        const { startGame, stopGame, cells } = this.subElements;\n\n        startGame.addEventListener('click', this.onStart);\n        stopGame.addEventListener('click', this.onStop);\n        cells.addEventListener('click', this.onPick);\n    }\n\n    update(size) {\n\n        const { body } = this.subElements;\n        this.stopGame();\n        this.size = size;\n        body.innerHTML = this.getBody()\n        this.subElements = this.getSubElements();\n        this.initEventListeners();\n\n    }\n\n    startGame() {\n\n        const { goblin } = this.subElements;\n\n        if (goblin.classList.contains('beadBlade__img-hidden')) {\n            goblin.classList.remove('beadBlade__img-hidden');\n        }\n\n        this.start = setInterval(() => {\n            const random = this.getRandomIntInclusive(this.size * this.size);\n            this.subElements[random].append(this.subElements.goblin);\n        }, 1000)\n\n    }\n\n    stopGame() {\n\n        const { success, failure } = this.subElements;\n\n        this.fail = 5;\n        this.score = 0;\n\n        success.textContent = this.score;\n        failure.textContent = this.score;\n\n        this.subElements.goblin.classList.add('beadBlade__img-hidden');\n        clearInterval(this.start)\n    }\n\n\n    getRandomIntInclusive(max) {\n        let min = Math.ceil(0);\n        max = Math.floor(max - 1);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    getSubElements() {\n        const elements = this.element.querySelectorAll('[data-element]');\n\n        for (const item of elements) {\n            this.subElements[item.dataset.element] = item;\n        }\n\n        return this.subElements;\n    }\n\n    getCell(size) {\n        const cells = [];\n        const cell = (index) => {\n            return index === 0 ?\n                `<div class=\"beadBlade__cell\" data-element=\"${index}\">\n                    <div class=\"beadBlade__img beadBlade__img-hidden\" data-element=\"goblin\">\n                        <img src=\"./assets/favicon/goblin.png\" alt=\"goblin\" class=\"beadBlade__goblin\">\n                    </div>\n                 </div>` :\n                `<div class=\"beadBlade__cell\" data-element=\"${index}\"></div>`\n        }\n        for (let i = 0; i < size; i++) {\n            cells.push(cell(i))\n        };\n\n        return cells.join('');\n    }\n\n    getBody() {\n        return `<div class=\"beadBlade\" style=\"width: ${(this.size * 160)}px\">\n        <div class=\"beadBlade__cells\" data-element=\"cells\">\n        ${this.getCell(this.size * this.size)}\n        </div>\n </div>`\n    }\n\n\n\n    getTemplate() {\n        return `<div>\n        <button  class=\"button button_secondary\" data-element=\"startGame\">\n        Start\n     </button>\n     <button class=\"button button_secondary\" data-element=\"stopGame\">\n         Stop\n     </button>\n     <div class=\"score score_success\" data-element=\"success\">0</div>\n     <div class=\"score score_failure\" data-element=\"failure\">5</div>\n        <div data-element=\"body\">\n                ${this.getBody()}\n        </div>\n    </div>`\n    }\n\n\n\n    remove() {\n        if (this.element) {\n            this.element.remove();\n        }\n    }\n\n    destroy() {\n        this.remove();\n        this.element = null;\n        this.subElements = null;\n    }\n\n\n}","import BeatBlade from \"../../components/beatBlade\";\n\n\nexport default class Page {\n    subElements = {};\n    components = {};\n\n\n\n    onChangeSize = (event) => {\n        this.components.beadBlade.update(event.target.value)\n    }\n\n\n\n    render() {\n\n        const element = document.createElement('div');\n        element.innerHTML = this.getTemplate();\n\n        this.element = element.firstElementChild;\n\n        this.subElements = this.getSubElements();\n        console.log('gdhkjhdgkj')\n        this.initComponents();\n        this.renderComponents();\n        this.initEventListeners();\n\n        return this.element;\n    }\n\n\n    initComponents() {\n        const beadBlade = new BeatBlade()\n\n        this.components = {\n            beadBlade,\n        }\n    }\n\n    renderComponents() {\n        Object.keys(this.components).forEach(component => {\n            const root = this.subElements[component];\n            const { element } = this.components[component];\n            root.append(element);\n        })\n    }\n\n    initEventListeners() {\n        let change = this.element.querySelectorAll('input[name=\"size\"]');\n        change.forEach((radio) => {\n            radio.addEventListener('change', this.onChangeSize);\n        })\n\n    }\n\n    getSubElements() {\n        const elements = this.element.querySelectorAll('[data-element]')\n        for (const item of elements) {\n            this.subElements[item.dataset.element] = item;\n        }\n        return this.subElements;\n    }\n\n    removeEventListeners() {\n        this.removeEventListeners();\n    }\n\n    remove() {\n        if (this.element) {\n            this.element.remove()\n        }\n    }\n\n    destroy() {\n        this.remove();\n        this.element = null;\n        this.subElements = null;\n\n\n        for (const component of Object.values(this.components)) {\n            component.destroy();\n        }\n    }\n\n\n    getTemplate() {\n        return `\n        <div data-element=\"beadBlade\">\n        \n        <div data-element=\"beadBlade\">\n\n        <input type=\"radio\" id=\"contactChoice1\"\n         name=\"size\" value=\"4\">\n        <label for=\"contactChoice1\">4</label>\n    \n        <input type=\"radio\" id=\"contactChoice2\"\n         name=\"size\" value=\"5\">\n        <label for=\"contactChoice2\">5</label>\n    \n        <input type=\"radio\" id=\"contactChoice3\"\n         name=\"size\" value=\"6\">\n        <label for=\"contactChoice3\">6</label>\n\n        </div>\n    </div>\n        `\n    }\n}"],"sourceRoot":""}